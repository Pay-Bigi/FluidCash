// <auto-generated />
using System;
using FluidCash.DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FluidCash.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FluidCash.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankDetailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DpCloudinaryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DpUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FluidCash.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HashedTransactionPin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FluidCash.Models.BankDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("FluidCash.Models.EmailLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CallingEndpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("FluidCash.Models.EmailTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = "defaultId",
                            CreatedAt = new DateTime(2025, 3, 22, 10, 34, 47, 907, DateTimeKind.Utc).AddTicks(3385),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            Template = "<!DOCTYPE html>\r\n                                        <html lang=\"en\">\r\n\r\n                                        <head>\r\n                                          <meta charset=\"UTF-8\">\r\n                                          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                                          <title>Email Template</title>\r\n                                          <style>\r\n                                            @import url(https://cdn.jsdelivr.net/npm/@xz/fonts@1/serve/hk-grotesk.min.css);\r\n\r\n                                            body {\r\n                                              font-size: 16px;\r\n                                              background: #f6f6f5;\r\n                                              font-family: \"HK Grotesk\", sans-serif;\r\n                                            }\r\n\r\n                                            p {\r\n                                              margin-top: 20px;\r\n                                              margin-bottom: 24px;\r\n                                              line-height: 1.5;\r\n                                              text-align: justify;\r\n                                            }\r\n\r\n                                            table {\r\n                                              width: 100%;\r\n                                            }\r\n\r\n                                            a {\r\n                                              color: #000000;\r\n                                              font-weight: 600;\r\n                                              text-decoration: none;\r\n                                            }\r\n\r\n                                            img {\r\n                                              width: 100%;\r\n                                              height: auto;\r\n                                            }\r\n\r\n                                            .wrapper {\r\n                                              width: 100%;\r\n                                              max-width: 567px;\r\n                                              margin: 32px auto;\r\n                                            }\r\n\r\n                                            .header {\r\n                                              padding: 24px 32px;\r\n                                            }\r\n\r\n                                            .content {\r\n                                              padding: 20px 32px;\r\n                                              background-color: #ffffff;\r\n                                            }\r\n\r\n                                            .footer {\r\n                                              padding: 10px 32px;\r\n                                              background-color: #000000;\r\n                                              color: #D80944;\r\n                                              font-size: 14px;\r\n                                              font-weight: 300;\r\n                                              line-height: 1.6;\r\n                                            }\r\n\r\n                                            .footer a {\r\n                                              text-decoration: none;\r\n                                              color: #D80944;\r\n                                              font-weight: 600;\r\n                                            }\r\n\r\n                                            .footer a:hover {\r\n                                              color: #D80944;\r\n                                            }\r\n\r\n                                            .footer .logo {\r\n                                              width: 150px;\r\n                                            }\r\n\r\n                                            .footer .navigation {\r\n                                              text-align: center;\r\n                                              margin-bottom: 10px;\r\n                                            }\r\n\r\n                                            .footer .navigation a {\r\n                                              display: inline-block;\r\n                                              color: #ffffff;\r\n                                              margin: 0 10px;\r\n                                            }\r\n\r\n                                            .footer .navigation a:hover {\r\n                                              color: #D80944;\r\n                                            }\r\n\r\n                                            .footer .social-icons {\r\n                                              text-align: center;\r\n                                              margin-bottom: 10px;\r\n                                            }\r\n\r\n                                            .footer .social-icons img {\r\n                                              width: 24px;\r\n                                              height: 24px;\r\n                                              margin: 0 5px;\r\n                                            }\r\n\r\n                                            .footer .social-icons a:hover img {\r\n                                              filter: invert(29%) sepia(84%) saturate(4849%) hue-rotate(340deg) brightness(95%) contrast(102%);\r\n                                            }\r\n\r\n                                            .footer .legal {\r\n                                              text-align: right;\r\n                                            }\r\n\r\n                                            .footer .legal a {\r\n                                              color: #777777;\r\n                                            }\r\n\r\n                                            .footer .legal a:hover {\r\n                                              color: #D80944;\r\n                                            }\r\n\r\n                                            .footer .contact {\r\n                                              color: #777777;\r\n                                              text-align: right;\r\n                                            }\r\n\r\n                                            .footer .contact a:hover {\r\n                                              color: #D80944;\r\n                                            }\r\n\r\n                                            .footer .separator {\r\n                                              border-top: 1px solid #dddddd;\r\n                                              margin: 10px 0;\r\n                                            }\r\n                                          </style>\r\n                                        </head>\r\n\r\n                                        <body>\r\n                                          <div class=\"wrapper\">\r\n                                            <!-- Email Header -->\r\n                                            <div class=\"header\">\r\n                                              <a href=\"{{org-url}}\">\r\n                                                <img class=\"logo\" src=\"{{logo}}\" alt=\"\" />\r\n                                              </a>\r\n                                            </div>\r\n                                            <!-- End Email Header -->\r\n\r\n                                            <!-- Email Content -->\r\n                                            <div class=\"content\">\r\n                                              <table>\r\n                                                <tr>\r\n                                                  <td>\r\n                                                    <p><strong>Hello {{recipient}},</strong></p>\r\n                                                  </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                  <td>\r\n                                                    {{body}}\r\n                                                  </td>\r\n                                                </tr>\r\n                                              </table>\r\n                                            </div>\r\n                                            <!-- End Email Content -->\r\n\r\n                                            <!-- Email Footer -->\r\n                                            <div class=\"footer\">\r\n                                              <table>\r\n                                                <tr>\r\n                                                  <td style=\"width: 25%;\">\r\n                                                    <a href=\"{{org-url}}\">\r\n                                                      <img class=\"logo\" src=\"{{logo}}\" alt=\"Company Logo\" />\r\n                                                    </a>\r\n                                                  </td>\r\n                                                  <td style=\"width: 50%; text-align: center;\">\r\n                                                    <div class=\"navigation\">\r\n                                                      <a href=\"{{org-url}}\">About Us</a>\r\n                                                      <a href=\"{{org-url}}\">Products</a>\r\n                                                      <a href=\"{{org-url}}\">Support</a>\r\n                                                      <a href=\"{{org-url}}\">Blog</a>\r\n                                                    </div>\r\n                                                    <div class=\"social-icons\">\r\n                                                      <a href=\"{{linkedinurl}}\">\r\n                                                        <img src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\" alt=\"LinkedIn\" />\r\n                                                      </a>\r\n                                                      <a href=\"{{twitterurl}}\">\r\n                                                        <img src=\"https://cdn-icons-png.flaticon.com/512/733/733579.png\" alt=\"Twitter\" />\r\n                                                      </a>\r\n                                                    </div>\r\n                                                  </td>\r\n                                                  <td style=\"width: 25%; text-align: right;\">\r\n                                                    <div class=\"legal\">\r\n                                                      <a href=\"{{org-url}}\">Terms of Use</a>\r\n                                                      <br />\r\n                                                      <a href=\"{{org-url}}\">Privacy Policy</a>\r\n                                                    </div>\r\n                                                    <div class=\"contact\">\r\n                                                      <p>Email: <a href=\"mailto:{{sendermail}}\">{{sendermail}}</a></p>\r\n                                                    </div>\r\n                                                  </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                  <td colspan=\"3\">\r\n                                                    <div class=\"separator\"></div>\r\n                                                    <p style=\"text-align: center; color: #777777;\">\r\n                                                      © {{year}} {{org-name}}. All Rights Reserved.\r\n                                                    </p>\r\n                                                  </td>\r\n                                                </tr>\r\n                                              </table>\r\n                                            </div>\r\n                                            <!-- End Email Footer -->\r\n                                          </div>\r\n                                        </body>\r\n\r\n                                        </html>",
                            TemplateName = "Default Mail Template"
                        });
                });

            modelBuilder.Entity("FluidCash.Models.GiftCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("FluidCash.Models.GiftCardRate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GiftCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GiftCardId");

                    b.ToTable("GiftCardRates");
                });

            modelBuilder.Entity("FluidCash.Models.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("FluidCash.Models.WalletTrading", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("CardAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExchangeValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GiftCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTradings");
                });

            modelBuilder.Entity("FluidCash.Models.WalletTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FluidCash.Models.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "PayBigiAdmin002340077770xy01",
                            Name = "AdminUser",
                            NormalizedName = "ADMINUSER",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "RegularUser002340077770xy01",
                            Name = "RegularUser",
                            NormalizedName = "REGULARUSER",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("FluidCash.Models.Account", b =>
                {
                    b.HasOne("FluidCash.Models.AppUser", "AppUser")
                        .WithOne("Account")
                        .HasForeignKey("FluidCash.Models.Account", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FluidCash.Models.BankDetail", b =>
                {
                    b.HasOne("FluidCash.Models.Account", "Account")
                        .WithOne("BankDetail")
                        .HasForeignKey("FluidCash.Models.BankDetail", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluidCash.Models.GiftCardRate", b =>
                {
                    b.HasOne("FluidCash.Models.GiftCard", "GiftCard")
                        .WithMany("GiftCardRates")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("FluidCash.Models.Wallet", b =>
                {
                    b.HasOne("FluidCash.Models.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("FluidCash.Models.Wallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluidCash.Models.WalletTrading", b =>
                {
                    b.HasOne("FluidCash.Models.GiftCard", "GiftCard")
                        .WithMany()
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FluidCash.Models.WalletTransaction", "Transaction")
                        .WithOne("Trading")
                        .HasForeignKey("FluidCash.Models.WalletTrading", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FluidCash.Models.Wallet", "Wallet")
                        .WithMany("Tradings")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GiftCard");

                    b.Navigation("Transaction");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("FluidCash.Models.WalletTransaction", b =>
                {
                    b.HasOne("FluidCash.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FluidCash.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FluidCash.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluidCash.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FluidCash.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FluidCash.Models.Account", b =>
                {
                    b.Navigation("BankDetail");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("FluidCash.Models.AppUser", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluidCash.Models.GiftCard", b =>
                {
                    b.Navigation("GiftCardRates");
                });

            modelBuilder.Entity("FluidCash.Models.Wallet", b =>
                {
                    b.Navigation("Tradings");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FluidCash.Models.WalletTransaction", b =>
                {
                    b.Navigation("Trading");
                });
#pragma warning restore 612, 618
        }
    }
}
